generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  cart           Cart[]
  product_review Product_review[]
  order          Orders[]
  userDetail     User_details[]
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model Cart {
  user_id          String
  product_id       Int
  product_quantity Int
  user             User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product          Product @relation(fields: [product_id], references: [pid], onDelete: Cascade)

  @@id([user_id, product_id])
  @@index([user_id])
  @@index([product_id])
}

model Order_detail {
  order_id         Int
  product_id       Int
  product_quantity Int
  orders           Orders  @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  product          Product @relation(fields: [product_id], references: [pid], onDelete: Cascade)

  @@id([order_id, product_id])
  @@index([order_id])
  @@index([product_id])
}

model Orders {
  order_id     Int            @id @unique(map: "order_id_UNIQUE") @default(autoincrement())
  user_id      String
  order_date   DateTime       @db.Date
  delivered    Int            @db.TinyInt
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  order_detail Order_detail[]

  @@index([user_id])
}

model Product {
  pid                  Int              @id @unique(map: "pid_UNIQUE") @default(autoincrement())
  ProductName          String
  category_Id          Int
  quanity_in_inventory Int
  Price                Int
  p_rating             Float            @db.Float
  meta_description     String           @db.TinyText
  full_description     String?          @db.MediumText
  brand_id             Int
  image                String           @db.MediumText
  cart                 Cart[]
  product_review       Product_review[]
  order_detail         Order_detail[]
  category             Category         @relation(fields: [category_Id], references: [id], onDelete: Cascade)
  brand                Brand            @relation(fields: [brand_id], references: [id])

  @@index([category_Id])
  @@index([brand_id])
}

model Product_review {
  user_id       String
  product_id    Int
  review_title  String   @db.VarChar(45)
  review_detail String   @db.VarChar(45)
  rating        String   @db.VarChar(45)
  published_at  DateTime @db.Date
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [product_id], references: [pid], onDelete: Cascade)

  @@id([user_id, product_id])
  @@index([user_id])
  @@index([product_id])
}

model User_details {
  user_id  String @id
  address  String @db.VarChar(191)
  city     String @db.VarChar(45)
  province String @db.VarChar(45)
  user     User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  phoneNo  String

  @@index([user_id])
}

model Category {
  category_name     String
  items_in_category Int
  id                Int       @id
  product           Product[]
}

model Brand {
  id      Int       @id
  name    String
  product Product[]
}
